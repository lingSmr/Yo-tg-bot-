package botServe

import (
	"Yo/src/consts"
	"Yo/src/models"
	"context"
	"errors"
	"fmt"
	"os"
	"strings"
	"sync"

	tgAPI "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	op = "server:ListenAndServe"
)

var OneMorTimeError = errors.New("One more time")

// 1, 2, 3 from main.menu
func (s *BotServ) updatingToWithCancel(chatId int64, state int, msgToUsr string) error {
	botMsg := tgAPI.NewMessage(chatId, msgToUsr)
	botMsg.ReplyMarkup = CancelKeyboard
	s.Bot.Send(botMsg)

	err := s.DataBase.UpdateState(chatId, state, s.Ctx)
	if err != nil {
		botMsg := tgAPI.NewMessage(chatId, consts.SendErrorConst)
		s.Bot.Send(botMsg)
		s.logger.Error("Cant update state of user", "Operation", op, "ChatId", chatId, "Error", err)
		return err
	}
	return nil
}

func (s *BotServ) startSwitch(chatId int64) error {
	botMsg := tgAPI.NewMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç—É–π –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç‚ùî")
	s.Bot.Send(botMsg)
	err := s.DataBase.UpdateState(chatId, consts.AskNameState, s.Ctx)
	if err != nil {
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		s.logger.Error("Cant update state of user", "Operation", op, "ChatId", chatId, "Error", err)
		return err
	}
	return nil
}

func (s *BotServ) askNameSwtich(chatId int64, msg string) error {
	if msg == "" {
		botMsg := tgAPI.NewMessage(chatId, "–¢—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ , –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		return OneMorTimeError
	}
	err := s.DataBase.UpdateName(chatId, msg, s.Ctx)
	if err != nil {
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		s.logger.Error("Cant update name of user", "Operation", op, "ChatId", chatId, "Error", err)
		return err
	}
	botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è "+msg+"‚ùï\n"+
		"P.S. –¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n")
	s.Bot.Send(botMsg)
	botMsg = tgAPI.NewMessage(chatId, `–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø–∞—Ä–æ—á–∫—É —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–πüëê
	–ß—Ç–æ –±—ã –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —ç—Ç–æ–º –±–æ—Ç–µ –¥–æ —Å—Ç–∞–¥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π , –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Ç—ç–≥ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞‚úçÔ∏è`)
	botMsg.ReplyMarkup = CancelKeyboard
	s.Bot.Send(botMsg)
	s.DataBase.UpdateState(chatId, consts.AddFriendState, s.Ctx)
	return nil
}

func (s *BotServ) addFriendSwitch(chatId int64, msg string) error {
	if msg == "–û—Ç–º–µ–Ω–∞" {
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return nil
	}
	friendTag := strings.ReplaceAll(msg, "@", "")
	if friendTag == "" {
		botMsg := tgAPI.NewMessage(chatId, "—Ç—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ , –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
		s.Bot.Send(botMsg)
		return OneMorTimeError
	}
	err := s.DataBase.AddFriend(chatId, friendTag, s.Ctx)
	if err != nil {
		s.logger.Error("Cant add friend to user", "Operation", op, "ChatId", chatId, "Error", err)
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		return err
	}
	botMsg := tgAPI.NewMessage(chatId, "–£—Å–ø–µ—Ö! –î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ωüéâ")
	s.Bot.Send(botMsg)
	s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
	return nil
}

func (s *BotServ) delFriendSwitch(chatId int64, msg string) error {
	if msg == "–û—Ç–º–µ–Ω–∞" {
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return nil
	}
	friendTag := strings.ReplaceAll(msg, "@", "")
	err := s.DataBase.DelFriend(chatId, friendTag, s.Ctx)
	if err != nil {
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		s.logger.Error("Cant del friend to user", "Operation", op, "ChatId", chatId, "Error", err)
		return nil
	}
	botMsg := tgAPI.NewMessage(chatId, "–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ωüòû")
	s.Bot.Send(botMsg)
	s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
	return nil
}

func (s *BotServ) updateNameSwitch(chatId int64, msg string) error {
	if msg == "–û—Ç–º–µ–Ω–∞" {
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return nil
	}
	if msg == "" {
		botMsg := tgAPI.NewMessage(chatId, "–¢—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ , –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		return OneMorTimeError
	}
	err := s.DataBase.UpdateName(chatId, msg, s.Ctx)
	if err != nil {
		s.logger.Error("Cant update name of user", "Operation", op, "ChatId", chatId, "Error", err)
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		return err
	}
	botMsg := tgAPI.NewMessage(int64(chatId), "–¢–µ–ø–µ—Ä—å —Ç–µ–±—è –∑–æ–≤—É—Ç —Ç–∞–∫: "+msg+" ü§®")
	s.Bot.Send(botMsg)
	s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
	return nil
}

func (s *BotServ) msgForAllSwitch(chatId int64, msg string) error {
	if msg == "–û—Ç–º–µ–Ω–∞" {
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return nil
	}
	users, err := s.DataBase.GetAllUsers(s.Ctx)
	if err != nil {
		s.logger.Error("Cant send message to all", "Operation", op, "ChatId", chatId, "Error", err)
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		return nil
	}
	delete(users, chatId)
	go func() {
		currentChatId := chatId
		msgIn := msg
		for user := range users {
			botMsg := tgAPI.NewMessage(int64(user), msgIn)
			s.Bot.Send(botMsg)
		}
		botMsg := tgAPI.NewMessage(currentChatId, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
		s.Bot.Send(botMsg)
	}()
	s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
	return nil
}

func (s *BotServ) sendDocument(chatId int64, url string) error {
	currentChatId := chatId
	file, err := os.Open(url)
	if err != nil {
		s.logger.Error("Cant open .log file to send it", "ChatId", chatId)
		botMsg := tgAPI.NewMessage(currentChatId, ".log –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
		botMsg.ReplyMarkup = consts.MainMenuConst
		s.Bot.Send(botMsg)
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return err
	}

	docMsg := tgAPI.NewDocument(chatId, tgAPI.FileReader{
		Name:   "logs.log",
		Reader: file,
	})
	_, err = s.Bot.Send(docMsg)
	if err != nil {
		s.logger.Error("Cant send logs to user", "ChatId", chatId)
		botMsg := tgAPI.NewMessage(currentChatId, ".log –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
		botMsg.ReplyMarkup = consts.MainMenuConst
		s.Bot.Send(botMsg)
		s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
		return err
	}
	s.logger.Info("Send log to user", "ChatId", chatId)
	s.returningToMainMenu(s.Bot, s.DataBase, chatId, s.Ctx)
	return nil
}

func (s *BotServ) yoForAll(chatId int64) error {
	friendMap, err := s.DataBase.GetFriends(chatId, s.Ctx)
	if err != nil || friendMap == nil {
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		s.logger.Error("Cant take users friends", "Operation", op, "ChatId", chatId, "Error", err)
		return err
	}

	go func() {
		currentChatId := chatId
		user, err := s.DataBase.GetData(chatId, s.Ctx)
		if err != nil {
			botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			s.Bot.Send(botMsg)
			s.logger.Error("Cant take data about user", "Operation", op, "ChatId", chatId, "Error", err)
			s.returningToMainMenu(s.Bot, s.DataBase, currentChatId, s.Ctx)
		}
		wg := sync.WaitGroup{}
		for friendChatId := range friendMap {
			wg.Add(1)
			go func() {
				currentFrId := friendChatId
				s.sendYo(*s.Bot, currentFrId, user.Name, user.Tag)
				wg.Done()
			}()
		}
		wg.Wait()
		botMsg := tgAPI.NewMessage(currentChatId, "–ô–æ—É!")
		s.Bot.Send(botMsg)
		s.returningToMainMenu(s.Bot, s.DataBase, currentChatId, s.Ctx)
		s.logger.Info("User Send YO!", "ChatId", currentChatId, "User tag", user.Tag, "User msg", user.Name)
	}()
	return nil
}

func (s *BotServ) allFriends(chatId int64) error {
	strBuilder := strings.Builder{}
	strBuilder.Write([]byte("–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π üìã:\n"))
	friendMap, err := s.DataBase.GetFriends(chatId, s.Ctx)
	if err != nil || friendMap == nil {
		botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		s.Bot.Send(botMsg)
		s.logger.Error("Cant take friends of user", "Operation", op, "ChatId", chatId, "Error", err)
		return err
	}
	go func() {
		currentChatId := chatId
		for friendChatId := range friendMap {
			user, err := s.DataBase.GetData(friendChatId, s.Ctx)
			if err != nil {
				botMsg := tgAPI.NewMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
				s.Bot.Send(botMsg)
				s.logger.Error("Cant take data about friend", "Operation", op, "ChatId", chatId, "Error", err)
				continue
			}
			str := fmt.Sprintf("- %s (@%s)\n", user.Name, user.Tag)
			strBuilder.Write([]byte(str))
		}
		botMsg := tgAPI.NewMessage(currentChatId, strBuilder.String())
		s.Bot.Send(botMsg)

		s.returningToMainMenu(s.Bot, s.DataBase, currentChatId, s.Ctx)
	}()
	return nil
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –π–æ—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ß–∞—Ç–ê–π–¥–∏ - –∫–æ–º—É , –∏–º—è –∏ —Ç—ç–≥ - –æ—Ç –∫–æ–≥–æ.
func (s *BotServ) sendYo(bot tgAPI.BotAPI, chatId int64, Name, tag string) {
	msg := fmt.Sprintf("%s(@%s) - ü§ôü§ôü§ô", Name, tag)
	botMsg := tgAPI.NewMessage(int64(chatId), msg)
	bot.Send(botMsg)
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (s *BotServ) returningToMainMenu(bot *tgAPI.BotAPI, dataBase models.DataBase, chatId int64, ctx context.Context) error {
	err := dataBase.UpdateState(chatId, consts.NothingState, ctx)
	if err != nil {
		return err
	}
	botMsg := tgAPI.NewMessage(int64(chatId), consts.MainMenuConst)
	botMsg.ReplyMarkup = NothingStateKeyboard
	bot.Send(botMsg)
	return nil
}
